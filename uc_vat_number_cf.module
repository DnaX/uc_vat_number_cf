<?php
/**
 * Implementation of hook_menu().
 */
function uc_vat_number_cf_menu() {
  $items = array();
  $items['admin/store/settings/uc_vat_number_cf'] = array(
    'title' => 'P.IVA e Codice Fiscale',
    'description' => 'Impostazioni P.IVA e Codice Fiscale.',
    'page callback' => 'drupal_get_form',    
    'page arguments' => array('uc_vat_number_cf_settings_form'),
    'access arguments' => array('administer vat number and fiscal code'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function uc_vat_number_cf_perm() {
  return array('administer vat number and fiscal code');
}

/**
 * Implementation of hook_access().
 */
function uc_vat_number_cf_access($op, $node, $account) {
  global $user;
  if ($op == 'view') {
    return user_access('administer vat number and fiscal code');
  }
}

/**
 * Implementation of hook_form_alter()
 */
function uc_vat_number_cf_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module', 'uc_vat_number_cf') .'/uc_vat_number_cf.js');
  global $user;
  if ($form_id == 'uc_cart_checkout_form'){
    $form['#validate'][] = 'uc_vat_number_cf_checkout_validate';
  }
  if ($form_id == 'uc_store_settings_form') {
    $form['fiscal'] = array(
      '#type' => 'fieldset',
      '#title' => t('Fiscal informations'),
      '#group' => 'store',
    );
    $form['fiscal']['uc_store_vat_number'] = array(
      '#type' => 'textfield',
      '#title' => t('P.IVA del negozio'),
      '#description' => t('La Partita Iva del negozio.'),
      '#default_value' => variable_get('uc_store_vat_number', ''),
      '#size' => 32,
      '#maxlength' => 13,
      '#required' => false,
    );
    $form['fiscal']['uc_store_cf'] = array(
      '#type' => 'textfield',
      '#title' => t('Codice Fiscale'),
      '#description' => t('Il Codice Fiscale del negozio.'),
      '#default_value' => variable_get('uc_store_cf', ''),
      '#size' => 32,
      '#maxlength' => 16,
      '#required' => false,
    );
  }

  if($form_id == 'uc_cart_checkout_form') {
    $result = db_query("SELECT * FROM {uc_billing_extend} WHERE uid = :uid AND uid != 0", array(':uid' => $user->uid));
    if ($row = $result->fetchObject()) {
      $billing_vat_number = $result->vat_number;
      $billing_cf = $row->cf;
    }

    $form['panes']['billing']['billing_vat_number'] = array(
      '#type' => 'textfield',
      '#title' => t('Partita IVA'),
      '#description' => variable_get('uc_vat_number_cf_vatnumber_checkout_message', 'Partita IVA (obbligatoria se sei un\'azienda).'),
      '#size' => 32,
      '#maxlength' => 13,
      '#weight' => 1,
      '#required' => false,
      '#default_value' => $billing_vat_number,
    );
    $form['panes']['billing']['billing_cf'] = array(
      '#type' => 'textfield',
      '#title' => t('Codice fiscale'),
      '#description' => variable_get('uc_vat_number_cf_cf_checkout_message', 'Codice Fiscale (obbligatorio se sei un\'azienda).'),
      '#size' => 32,
      '#maxlength' => 16,
      '#weight' => 1,
      #'#required' => false,
      '#required' => (variable_get('uc_vat_number_cf_cf_mandatory', 0) == 1 ? true : false),
      '#default_value' => $billing_cf,
    );
  }
  return;
}

/**
 * Implementation of hook_checkout_pane
 */
function uc_vat_number_cf_checkout_pane() {
  $panes[] = array(
    'id' => 'vat_number',
    'title' => t('Partita IVA'),
    'desc' => t('Partita IVA'),
    'callback' => 'uc_checkout_pane_vat_number',
    'weight' => 4,
  );
  $panes[] = array(
    'id' => 'cf',
    'title' => t('Codice Fiscale'),
    'desc' => t('Codice Fiscale'),
    'callback' => 'uc_checkout_pane_cf',
    'weight' => 4.1,
  );
  return $panes;
}

/**
 * Test if the record already exist
 *
 * @param $order_id Order ID
 * @param $vat_number VAT Number
 * @param $cf Codice Fiscale
 * @return number of record that satisfying the requirements
 */
function _uc_vat_number_cf_billing_extend_exist_($order_id/*, $vat_number, $cf*/){
  $query = "
    SELECT count(*) 
    FROM {uc_billing_extend} 
    WHERE order_id = :order_id 
  ";
/*      AND vat_number = '%s' 
      AND cf = '%s'
  ";*/

  $result = db_query($query, array(':order_id' => $order_id)/*, $vat_number, $cf*/)->fetchField();

  return ($result > 0 ? true : false);
}

function uc_vat_number_cf_order($op, &$arg1, $arg2) {
  global $user;
  switch ($op) {
    case 'update':

      // when the order is changing (the user begin a registered user), I update
      // the uid information on uc_billing_extend table
      db_update('uc_billing_extend') 
        ->fields(array(
          'uid' => $arg1->uid,
        ))
        ->condition('order_id', $arg1->order_id)
        ->execute();
      break;
    case 'save':
      // Load up the existing data array.
      $data = db_query("SELECT data FROM {uc_orders} WHERE order_id = :order_id", array(':order_id' => $arg1->order_id))->fetchField();
      $data = unserialize($data);

      // Add the custom data into the data array
      $data['billing_vat_number'] = $_POST['panes']['billing']['billing_vat_number'];
      $data['billing_cf'] = $_POST['panes']['billing']['billing_cf'];

      // Save it again.
      db_update('uc_orders') 
        ->fields(array(
          'data' => serialize($data),
        ))
        ->condition('order_id', $arg1->order_id)
        ->execute();

      if (arg(4) == 'edit') {
      }
      else {
        // If already exist:
        if(_uc_vat_number_cf_billing_extend_exist_($arg1->order_id /*, $data['billing_vat_number'], $data['billing_cf']*/)){
          /*db_query("UPDATE {uc_billing_extend} SET vat_number = '%s', cf = '%s' "
          ."WHERE uid = %d", $arg1->billing_vat_number, $arg1->billing_cf, $user_id);*/

          db_update('uc_billing_extend') 
            ->fields(array(
              'vat_number' => $data['billing_vat_number'],
              'cf' => $data['billing_cf'],
              'order_id' => $arg1->order_id,
            ))
            ->condition('order_id', $arg1->order_id)
            ->condition('vat_number', $data['billing_vat_number'])
            ->condition('cf', $data['billing_cf'])
            ->execute();

        }else{

          db_insert('uc_billing_extend') 
            ->fields(array(
              'uid' => $arg1->uid,
              'order_id' => $arg1->order_id,
              'vat_number' => $data['billing_vat_number'],
              'cf' => $data['billing_cf'],
            ))
            ->execute();
        }
      }
      break;
    case 'load':
      $result = db_query("SELECT * FROM {uc_billing_extend} WHERE order_id = :order_id", array(':order_id' => $arg1->order_id));     
      if ($data = $result->fetchObject()) {       
        $arg1->billing_vat_number = $data->vat_number;
        $arg1->billing_cf = $data->cf;
      }
      break;
    case 'delete':
      db_delete('uc_billing_extend')
        ->condition('order_id', $arg1->order_id)
        ->execute();
      break;
  }
}

/**
 * Implementation of hook_order_pane().
 */
function uc_vat_number_cf_order_pane() {
  $panes[] = array(
    'id' => 'billing',
    'callback' => 'uc_order_pane_admin_vat_number',
    'title' => t('Partita Iva'),
    'desc' => t('La Partita Iva del Cliente.'),
    'class' => 'pos-left',
    'weight' => 2.1,
    'show' => array('view', 'edit', 'customer'),
  );
  $panes[] = array(
    'id' => 'billing',
    'callback' => 'uc_order_pane_admin_cf',
    'title' => t('Codice Fiscale'),
    'desc' => t('Il Codice Fiscale del Cliente.'),
    'class' => 'pos-left',
    'weight' => 2.2,
    'show' => array('view', 'edit', 'customer'),
  );
  return $panes;
}

function uc_order_pane_cf($op, $arg1) {
  switch ($op) {

    case 'customer':
      if (empty($arg1->billing_cf)) {
        $cf = t('Non specificato.');
      }else if (!empty($arg1->billing_cf)) {
        $cf = $arg1->billing_cf;
      }
      return t('!cf', array('!cf' => $cf));

    case 'view':
      if (empty($arg1->billing_cf)) {
        $cf = t('Non specificato.');
      }else if (!empty($arg1->billing_cf)) {
        $cf = $arg1->billing_cf;
      }
      return t('!cf', array('!cf' => $cf));
   
    case 'edit-form':
      break;
  }
}

/**
 * Implementation of hook_token_values(). (token.module)
 */
function uc_vat_number_cf_token_values($type, $object = NULL) {
  $values = array();  
  switch ($type) {

    case 'global':
      $values['store-vat-number'] = variable_get('uc_store_vat_number', t('La P.IVA del negozio.'));
      $values['store-cf'] = variable_get('uc_store_cf', t('Il Codice Fiscale del negozio.'));
      break;
 
   case 'order':
      $order = $object;
      $values['order-vat-number'] = $order->billing_vat_number;
      $values['order-cf'] = $order->billing_cf;
      break;
  
  }
  return $values;
}

/**
 * Implementation of hook_token_list(). (token.module)
 */
function uc_vat_number_cf_token_list($type = 'all') {
  $tokens = array();
  $tokens['global']['store-vat-number'] = t('La P.IVA del negozio.');
  $tokens['global']['store-cf'] = t('Il Codice Fiscale del negozio.');
  if ($type == 'order' || $type == 'ubercart' || $type == 'all') {
    $tokens['order']['order-vat-number'] = t('La P.IVA del cliente.');
    $tokens['order']['order-cf'] = t('Il Codice Fiscale del cliente.');
  }
  return $tokens;
}

function uc_vat_number_cf_checkout_validate($form, &$form_state) {
  /*
  List of European countries (in order of the array)
	Germany => 276
	Austria => 40
	Belgium => 56
	Denmark => 208
	Spain => 724
	Finland => 246
	France => 250
	Greece => 300
	Ireland => 372
	Italy => 380
	Luxembourg => 442
	Netherlands => 528
	Portugal => 620
	United Kingdom => 826
	Sweden => 752
	Cyprus => 196
	Estonia => 233
	Hungary => 348
	Latvia => 428
	Lithuania => 440
	Malta => 470
	Poland => 616
	Czech => 203
	Slovak => 703
	Slovenia => 705
	Bulgaria => 100
	Romania => 642
	*/

  $european_countries = array(276, 40, 56, 208, 724, 246, 250, 300, 372, 380, 442, 528, 620, 826, 752, 196, 233, 348, 428, 440, 470, 616, 203, 703, 705, 100, 642);
  //if (!in_array($form_state['values']['panes']['delivery']['delivery_country'], $european_countries)) {
  //  form_set_error('', t('Export fuori dall\'UE.'));
  //}
  // contry store -> variable_get('uc_store_country', 380)
  //if ((in_array($form_state['values']['panes']['billing']['billing_country'], $european_countries)) && ($form_state['values']['panes']['billing']['billing_company'] != '')) {
  if (($form_state['values']['panes']['billing']['billing_company'] != '') && ($form_state['values']['panes']['billing']['billing_country'] == 380)) {
    if ($form_state['values']['panes']['billing']['billing_vat_number'] == '') {
      // azienda italiana, P.IVA obbligatoria
      form_set_error('panes][billing][billing_vat_number', t('P.IVA obbligatoria.'));
    }
    if ($form_state['values']['panes']['billing']['billing_cf'] == '') {
      // azienda italiana, Codice Fiscale obbligatorio
      form_set_error('panes][billing][billing_cf', t('Codice Fiscale obbligatorio.'));
    }
  }
  if ((in_array($form_state['values']['panes']['billing']['billing_country'], $european_countries)) && ($form_state['values']['panes']['billing']['billing_company'] != '')) {
    if ($form_state['values']['panes']['billing']['billing_vat_number'] == '') {
      // azienda italiana, P.IVA obbligatoria
      form_set_error('panes][billing][billing_vat_number', t('P.IVA obbligatoria.'));
    }
  }
  if ((variable_get('uc_vat_number_cf_cf_mandatory', 0) == 1) && ($form_state['values']['panes']['billing']['billing_cf'] == '')) {
    form_set_error('panes][billing][billing_cf', t('Codice Fiscale obbligatorio.'));
  }
}

/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Checkout panes callbacks.
 */
function uc_checkout_pane_vat_number($op, &$arg1, $arg2) {
  switch($op) {
    case 'review':
      if ($arg1->data['billing_vat_number'] == '') {
        $review[] = array('title' => t('Partita IVA'), 'data' => t('Non specificata.'));
      }
      else {
        $review[] = array('title' => t('Partita IVA'), 'data' => $arg1->data['billing_vat_number']);
      }
      return $review;
  }
}

function uc_checkout_pane_cf($op, &$arg1, $arg2) {
  switch($op) {
    case 'review':
      //echo $_POST['panes']['billing']['billing_cf'];
      if ($arg1->data['billing_cf'] == '') {
        $review[] = array('title' => t('Codice Fiscale'), 'data' => t('Non specificato.'));
      }
      else {
        $review[] = array('title' => t('Codice Fiscale'), 'data' => $arg1->data['billing_cf']);
      }
      return $review;
  }
}

/**
 * Checkout panes callbacks.
 */
function uc_order_pane_admin_vat_number($op, $arg1) {
  switch ($op) {
    case 'customer':
      if (empty($arg1->billing_vat_number)) {
        $vat_number = t('Non specificata.');
      }else if (!empty($arg1->billing_vat_number)) {
        $vat_number = $arg1->billing_vat_number;
      }
      return t('!vat_number', array('!vat_number' => $vat_number));     

    case 'view':
      if (empty($arg1->billing_vat_number)) {
        $vat_number = t('Non specificata.');
      }else if (!empty($arg1->billing_vat_number)) {
        $vat_number = $arg1->billing_vat_number;
      }
      return t('!vat_number', array('!vat_number' => $vat_number));
    
    case 'edit-form':
      $form['admin_vat_number_field'] = array(
        '#type' => 'textfield',
        '#size' => 32,
        '#default_value' => $arg1->billing_vat_number,
      );
      return $form;

    case 'edit-theme':
      $output = drupal_render($arg1['admin_vat_number_field']);
      return $output;

    case 'edit-process':
      if (($arg1['admin_vat_number_field'] == '') && ($arg1['admin_cf_field'] == '')) {

        db_delete('uc_billing_extend')
          ->condition('uid', $arg1['uid'])
          ->execute();

      }else{

        $num_rows = db_query('SELECT COUNT(*) FROM {uc_billing_extend} WHERE uid = :uid', array(':uid' => $arg1['uid']))->fetchField();
        if ($num_rows) {

          db_update('uc_billing_extend') 
            ->fields(array(
              'vat_number' => $arg1['admin_vat_number_field'],
            ))
            ->condition('uid', $arg1['uid'])
            ->execute();

        }else{

          db_insert('uc_billing_extend')
            ->fields(array(
              'uid' => $arg1['uid'],
              'order_id' => $arg1['order_id'],
              'vat_number' => $arg1['admin_vat_number_field'],
              'cf' => $arg1['admin_cf_field']
            ))
            ->execute();
        }
      }
      return;
  }
}

function uc_order_pane_admin_cf($op, $arg1) {
  switch ($op) {
    case 'customer':
      if (empty($arg1->billing_cf)) {
        $cf = t('Non specificato.');
      }else if (!empty($arg1->billing_cf)) {
        $cf = $arg1->billing_cf;
      }
      return t('!cf', array('!cf' => $cf));     

    case 'view':
      if (empty($arg1->billing_cf)) {
        $cf = t('Non specificato.');
      }else if (!empty($arg1->billing_cf)) {
        $cf = $arg1->billing_cf;
      }
      return t('!cf', array('!cf' => $cf));

    case 'edit-form':
      $form['admin_cf_field'] = array(
        '#type' => 'textfield',
        '#size' => 32,
        '#default_value' => $arg1->billing_cf,
      );
      return $form;

    case 'edit-theme':
      $output = drupal_render($arg1['admin_cf_field']);
      return $output;

    case 'edit-process':
      if (($arg1['admin_vat_number_field'] == '') && ($arg1['admin_cf_field'] == '')) {
        db_delete('uc_billing_extend')
          ->condition('uid', $arg1['uid'])
          ->execute();
        //db_query("DELETE FROM {uc_billing_extend} WHERE uid = %d", $arg1['uid']);
      }else{
        $num_rows = db_query('SELECT COUNT(*) FROM {uc_billing_extend} WHERE uid = :uid', array(':uid' => $arg1['uid']))->fetchField();
        if ($num_rows) {
          //db_query("UPDATE {uc_billing_extend} SET cf = '%s' WHERE uid = %d", $arg1['admin_cf_field'], $arg1['uid']);   
          db_update('uc_billing_extend') 
            ->fields(array(
              'cf' => $arg1['admin_cf_field'],
            ))
            ->condition('uid', $arg1['uid'])
            ->execute();       
        }else{

          db_insert('uc_billing_extend') 
            ->fields(array(
              'uid' => $arg1['uid'],
              'order_id' => $arg1['order_id'],
              'vat_number' => $arg1['admin_vat_number_field'],
              'cf' => $arg1['admin_cf_field'],
            ))
            ->execute();        
        }
      }
      return;
  }
}

function uc_vat_number_cf_settings_form() {
  $form['uc_vat_number_cf_vatnumber_checkout_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Descrizione da mostrare ai clienti quando sono alla cassa'),
    '#default_value' => variable_get('uc_vat_number_cf_vatnumber_checkout_message', 'Partita IVA (obbligatoria se sei un\'azienda).'),
    '#rows' => 10,
  );

  $form['uc_vat_number_cf_cf_checkout_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Descrizione da mostrare ai clienti quando sono alla cassa'),
    '#default_value' => variable_get('uc_vat_number_cf_cf_checkout_message', 'Codice Fiscale (obbligatorio se sei un\'azienda).'),
    '#rows' => 10,
  );

  $form['uc_vat_number_cf_cf_mandatory'] = array(
    '#type' => 'checkbox',
    '#title' => t('Codice fiscale obbligatorio anche per privati'),
    '#default_value' => variable_get('uc_vat_number_cf_cf_mandatory', 0),
  );

  return system_settings_form($form);
}
